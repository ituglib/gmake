/* Jenkinsfile pipeline for GMake on NSBLDE4 (TNS/E) */
pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    triggers {
        pollSCM('H H * * *')
    }
    stages {
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM',
                changelog: true,
                poll: true,
                branches: [[name: 'main']],
                extensions: [
                    [$class: 'CleanBeforeCheckout'],
                        [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true,
                                recursiveSubmodules: true, reference: '', trackingSubmodules: false]],
                doGenerateSubmoduleConfigurations: false, extensions: [
                    [$class: 'CleanCheckout'],
                    [$class: 'CloneOption', timeout: 120, shallow: false, noTags: false],
                    [$class: 'CheckoutOption', timeout: 120],
                    ],
                userRemoteConfigs: [[url: 'https://github.com/ituglib/gmake.git']]])
            }
        }
        stage('build') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BUILD_SV=/G/sas22/jenkmake']) {
                    sh "echo Building to ${BUILD_SV}/gmake"
                    sh "/usr/coreutils/bin/make -f Makefile.NSE.OSS"
                    sh "/usr/coreutils/bin/make -f Makefile.NSE.OSS GMAKE_EXE=${BUILD_SV}/gmake"
                }
            }
        }
        stage('findcall_floss') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "Ignoring results"'
                }
            }
        }
        stage('test') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh '/usr/coreutils/bin/make -C test TEST_LINT= SHELL=/usr/coreutils/bin/bash'
                }
            }
        }
        stage('install') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=gmake',
                        'DEST=/G/data05/jenkins']) {
                    sh "/usr/coreutils/bin/make -f Makefile.NSE.OSS GMAKE_EXE=${DEST}/gmake"
                }
            }
        }
        stage('deploy') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=gmake',
                        'MANIFEST_FILE=gmake.bin.list',
                        'GHOME=/G/data05/jenkins',
                        'PAK_FILE=gmakepak',
                        'PAK_LIST=gmakelst',
                        'DEST=/home/ituglib/randall/stage']) {
                    sh 'export INSTALL_LOCATION="${GHOME}/" && export VERSION_PATH="${INSTALL_LOCATION}/gmake" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && TESTV=`echo $VERSION | fgrep -e -rc`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.pak ${MANIFEST_FILE}; fi'
                }
            }
        }
        stage('remote') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=gmake',
                        'GHOME=/G/data05/randall',
                        'DEST=/home/ituglib/randall/stage',
                        'REMOTE=-oPort=28222 ituglib.randall@10.0.0.190',
                        'REMOTE_DEST=/web/stage']) {
                    sh 'export INSTALL_LOCATION="${GHOME}/" && export VERSION_PATH="${INSTALL_LOCATION}/gmake" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && TESTV=`echo $VERSION | fgrep -e -rc`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else echo "put $DEST/${BASENAME}-* $REMOTE_DEST" | /G/system/zssh/sftposs $REMOTE 2>&1; fi'
                    sh 'rm ${DEST}/${BASENAME}-*'
                }
            }
        }
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins TCMVNS] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
      	success {
            cleanWs()
      	}
    }
}
